% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/XMLElement.R
\docType{class}
\name{XMLElement}
\alias{XMLElement}
\alias{xml_elem}
\title{XML element builder}
\description{
XML element builder
}
\section{Usage}{

\preformatted{doc <- XMLDocument$new()
doc <- xml_doc()

elem <- XMLElement$new("meta", type = "info")
elem <- xml_elem("meta", type = "info")

elem$update(margin = "auto")

new_elem <- elem$copy()

}
}

\section{Methods}{


\describe{



\item{\code{$new(name, ...)}}{
Create a new \code{XMLElement} with the given name. Extra named arguments
are treated as tag attributes, and unnamed arguments are considered child
nodes.
\tabular{ll}{
  \code{name} \tab name of xml tag to create \cr
  \code{...} \tab attribute name/value pairs, and child nodes \cr
}
}


\item{\code{$update(...)}}{
Updates the attributes and children.

Named arguments are considered attributes and will overwrite
existing attributes with the same name. Set to NULL to delete the attribute.
Set to NA to make this a bare attribute without a value.

Unnamed arguments are appended to the list of child nodes.  These
should be text, other XMLElements or any ojbect that can be represented
as a single text string using "as.character()".  To be specific about
where in the child list a node will be placed, use \code{$append()}
\tabular{ll}{
  \code{...} \tab attribute name/value pairs, and child nodes \cr
}
}


\item{\code{$append(...)}}{
Append \code{XMLElement} objects as children to this element
\tabular{ll}{
  \code{...} \tab all arguments treated as XMLElement objects and added as the children of this element \cr
}
}


\item{\code{$add(name, ...)}}{
Create a new \code{XMLElement} and add it as a  child to this element. Return the
new element.  \emph{See \code{$new()} for description of arguments.}
}

\item{\code{$remove(indices)}}{
Remove \code{XMLElement} child objects from this element by index.
\tabular{ll}{
  \code{indices} \tab indices of XMLElement objects to remove \cr
}
}

\item{\code{$as_character()}}{
Convert \code{XMLElement} to a character string.
}

\item{\code{$print()}}{
Print \code{XMLElement} to terminal.
}

\item{\code{$copy()}}{
Copy \code{XMLElement}.
}

}
}

\examples{
\dontrun{
XMLElement$new('div', class = ".big", "DIV contents")
}


}
\keyword{datasets}
